{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","createTable","table","rows","state","rows1","cols","columns1","setData","dataSet","data","shuffle","match","matching","i","children","j","push","className","id","name","document","getElementsByName","console","log","createTable2","rows2","columns2","handleChange","bind","prevProps","prevState","this","elements","k","length","event","setState","target","value","class","type","placeholder","onChange","ref","el","_html","Component","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.308d196f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport shuffle from \"shuffle-array\";\n\nimport \"./App.css\";\nimport { thisExpression } from \"@babel/types\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rows1: \"\",\n      rows2: \"\",\n      columns1: \"\",\n      columns2: \"\",\n      matching: \"\",\n      dataSet: [\n        \"Jake\",\n        \"John\",\n        \"Catherine\",\n        \"NIU\",\n        \"Professor\",\n        \"Computers\",\n        \"Test\",\n        \"Football\",\n        \"Fake\",\n        \"Tester\",\n        \"Science\",\n        \"Food\"\n        // \"Random\",\n        // \"Words\",\n        // \"Fill\",\n        // \"School\",\n        // \"Homework\",\n        // \"New York\",\n        // \"Kansas\",\n        // \"Texas\",\n        // \"USA\",\n        // \"Utah\",\n        // \"Korea\",\n        // \"Japan\",\n        // \"Minnesota\",\n        // \"Mount Everest\",\n        // \"ASDF\",\n        // \"LLLOLL\",\n        // \"Pharmacy\",\n        // \"Doctor\",\n        // \"test\",\n      ]\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  //using cdu to check if value is being processed correctly\n  componentDidUpdate(prevProps, prevState) {\n    let match = this.state.matching;\n    let elements = document.getElementsByName(match);\n\n    for (let k = 0; k < elements.length; k++) {\n      console.log(\"table2\", elements[k]);\n      elements[k].className = \"green\";\n    }\n  }\n\n  handleChange(event) {\n    // check it out: we get the evt.target.name (which will be either \"email\" or \"password\")\n    // and use it to target the key on our `state` object with the same name, using bracket syntax\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  createTable = () => {\n    let table = [];\n    let rows = this.state.rows1;\n    let cols = this.state.columns1;\n    let setData = this.state.dataSet;\n    let data = shuffle(setData);\n    let match = this.state.matching;\n\n    // Outer loop to create parent\n    for (let i = 0; i < rows; i++) {\n      let children = [];\n      //Inner loop to create children\n      for (let j = 0; j < cols; j++) {\n        shuffle(data);\n        children.push(\n          <td className=\"black\" id={j} name={data[j]}>\n            {data[j]}\n          </td>\n        );\n      }\n      //Create the parent and add the children\n      table.push(<tr id={i}>{children}</tr>);\n\n      let elements = document.getElementsByName(match);\n      console.log(\"MATCH\", match);\n\n      // for (let k = 0; k < elements.length; k++) {\n      //   console.log(elements[k]);\n      //   if (elements[k] === match) {\n      //     console.log(\"table1\", elements[k]);\n          \n      //     elements[k].className = \"green\";\n      //   }\n      // }\n    }\n    return table;\n  };\n\n  createTable2 = () => {\n    let table = [];\n    let rows = this.state.rows2;\n    let cols = this.state.columns2;\n    let setData = this.state.dataSet;\n    let data = shuffle(setData);\n    let match = this.state.matching;\n\n    // Outer loop to create parent\n    for (let i = 0; i < rows; i++) {\n      let children = [];\n      //Inner loop to create children\n      for (let j = 0; j < cols; j++) {\n        shuffle(data);\n        children.push(\n          <td className=\"black\" id={j} name={data[j]}>\n            {data[j]}\n          </td>\n        );\n      }\n      //Create the parent and add the children\n      table.push(<tr id={i}>{children}</tr>);\n    }\n    return table;\n  };\n\n  render() {\n    var self = this;\n    return (\n      <div className=\"App\">\n        <div class=\"container\">\n          <div className=\"main-container shadow row p-2 border-bottom\">\n            <form class=\"col-4 pl-5\">\n              <div class=\"row\">\n                <a class=\"main-label \">Table 1</a>\n              </div>\n\n              <div class=\"row mt-2\">\n                <a class=\"row-text\">Rows:</a>\n                <input\n                  type=\"\"\n                  class=\" ml-5\"\n                  id=\"table-1-rows\"\n                  placeholder=\"0\"\n                  name=\"rows1\"\n                  value={this.state.rows1}\n                  onChange={this.handleChange}\n                />\n              </div>\n\n              <div class=\"row\">\n                <a class=\"row-text\">Columns:</a>\n                <input\n                  type=\"\"\n                  class=\" ml-4 mt-1\"\n                  id=\"table-1-columns\"\n                  name=\"columns1\"\n                  value={this.state.columns1}\n                  onChange={this.handleChange}\n                  placeholder=\"0\"\n                />\n              </div>\n            </form>\n\n            <form class=\"col-4\">\n              <div class=\"row\">\n                <a class=\"main-label\">Table 2</a>\n              </div>\n\n              <div class=\"row mt-2\">\n                <a class=\"row-text\">Rows:</a>\n                <input\n                  type=\"\"\n                  class=\" ml-5\"\n                  id=\"table-2-rows\"\n                  placeholder=\"0\"\n                  name=\"rows2\"\n                  value={this.state.rows2}\n                  onChange={this.handleChange}\n                />\n              </div>\n\n              <div class=\"row\">\n                <a class=\"row-text\">Columns:</a>\n                <input\n                  type=\"\"\n                  class=\" ml-4 mt-1\"\n                  id=\"table-2-columns\"\n                  placeholder=\"0\"\n                  name=\"columns2\"\n                  value={this.state.columns2}\n                  onChange={this.handleChange}\n                />\n              </div>\n            </form>\n\n            <form class=\"col-4 mt-5\">\n              <div class=\"row\">\n                <a class=\"row-text\">Matching item</a>\n                <input\n                  type=\"\"\n                  class=\"ml-4\"\n                  id=\"matching\"\n                  placeholder=\"0\"\n                  name=\"matching\"\n                  value={this.state.matching}\n                  onChange={this.handleChange}\n                />\n              </div>\n            </form>\n          </div>\n\n          <div class=\"row\">\n            <table class=\"table-container col-6\">\n              <this.createTable ref={el => (this._html = el)} />\n            </table>\n\n            <table class=\"table-container col-6\">\n              <this.createTable2 />\n            </table>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n   document.getElementById('root'),\n   );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}